"""
Rebuilding articles links Articles with their associated Lynchings but does 
not overwrite any data about the articles themselves.  Data on articles has 
been forked from the original data in PCAce and a significant amount of 
metadata has been added to enrich the user display.  Article data should not be
wiped or the enriched data will be lost.

Article data is from a CSV export generated by PCAce and processed by a 
manage.py command 'rebuild_articles'

Usage::

    $ ./manage.py rebuild_articles <filename>

Import File must be in CSV format and contain the following fields in the following 
order:

* event_id - int of the MacroEvent id from PCAce
* article_id - int of the Article id from PCAce
* filename - string of filename for the associated article PDF
* victim_name - string of the name of the victim

**IMPORTANT NOTE:** 

* First row is ignored from the import file as row headers.

"""

import csv

from django.core.management.base import BaseCommand, CommandError
from django.utils.encoding import smart_unicode, smart_str

from georgia_lynchings.articles.models import Article
from georgia_lynchings.lynchings.models import Lynching

class Command(BaseCommand):
    help = "Related articles to lynchings by the PCA Identifier in th import file."
    args = "<filename>"
    fieldnames = ('event_id', 'article_id', 'filename', 'victim_name')


    def handle(self, *args, **options):
    	reader = self._init_reader(args)
        for row in reader:
            self._handle_row(row)

    def _handle_row(self, row):
        """
        Handles data from an individual row in the import file.
        """
        try: 
            lynching = Lynching.objects.get(pca_id=row['event_id'])
            try:
                article = Article.objects.get(identifier=row['article_id'])
                lynching.articles.add(article)
            except Article.DoesNotExist:
                print("No Article with PCAce ID %s" % row["article_id"])
        except Lynching.DoesNotExist:
            print("No Lynching for PCAce ID %s Found!" % row['event_id'])

    def _init_reader(self, *args):
        """Open the input file and return the reader object."""

        try:
            filename = "%s" % args[0]
            self.csv_file = open(filename, 'rU')
            reader = csv.DictReader(self.csv_file, fieldnames=self.fieldnames)
            reader.next()
            return reader
        except IOError as e:
            raise CommandError("Unable to find file %s" % filename)