.. _DEPLOYNOTES:

Installation
============

Software dependencies
---------------------

We recommend the use of `pip <http://pip.openplans.org/>`_ for environment 
and dependency management in this and other Python projects. If you don't 
have them installed we recommend ``sudo apt-get install pip``.

Configure the environment
~~~~~~~~~~~~~~~~~~~~~~~~~

When first installing this project, you'll need to create a virtual environment
for it. The environment is just a directory. You can store it anywhere you like.
For instance, if the source is in ``/home/httpd/sites/georgia_lynchings/src``,
consider creating an environment in ``/home/httpd/sites/virtual_envs/georgia_lynchings``.
One way to do this is using virtualenv, wirtualenvwrapper, and distribute::

    $ sudo pip install -U virtualenv
    $ sudo pip install -U virtualenvwrapper
    $ sudo pip install -U distribute

After that you should add some settings to your .bashrc ::

    export WORKON_HOME=/home/httpd/sites/virtual_envs
    export PROJECT_HOME=/home/httpd/sites
    source /usr/local/bin/virtualenvwrapper.sh
    export PIP_VIRTUALENV_BASE=$WORKON_HOME # Tell pip to create its virtualenvs in $WORKON_HOME.
    export PIP_RESPECT_VIRTUALENV=true # Tell pip to automatically use the currently active virtualenv.
    export VIRTUALENV_USE_DISTRIBUTE=true

Now, you can create the virtual environment for this project, and launch the virtual
environment in one command::
    
  $ mkvirtualenv --no-site-packages --distribute georgia_lynchings
  
If the environemnt is already created, you can activate the virtual environment for 
this project with this command::
    
  $ . /home/httpd/sites/virtual_envs/georgia_lynchings/bin/activate  

Once the environment has been activated inside a shell, Python programs
spawned from that shell will read their environment only from this
directory, not from the system-wide site packages. Installations will
correspondingly be installed into this environment.

.. Note::
  Installation instructions and upgrade notes below assume that
  you are already in an activated shell.

Install python dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Georgia Lynchings depends on several python libraries. The installation is mostly
automated, and will print status messages as packages are installed. If there
are any errors, pip should announce them very loudly.

You will need python-dev package installed first::

  $ sudo apt-get install python-dev

To install python dependencies, cd into the repository checkout and::

  $ pip install -r pip-install-req.txt

If you are a developer or are installing to a continuous ingration server
where you plan to run unit tests, code coverage reports, or build sphinx
documentation, you probably will also want to::

  $ pip install -r pip-dev-req.txt

After this step, your virtual environment should contain all of the
needed dependencies.

Install the application
-----------------------

Apache
~~~~~~

After installing dependencies, copy and edit the wsgi and apache
configuration files in src/apache inside the source code checkout. Both may
require some tweaking for paths and other system details.

Configuration
~~~~~~~~~~~~~

Configure application settings by copying ``localsettings.py.dist`` to
``localsettings.py`` and editing for local settings (database, Fedora
repository, etc.).

After configuring all settings, initialize the db with all needed
tables and initial data using::

  $ python manage.py syncdb


Notes for developers
====================

The following instructions can be ignored when deploying to a staging
or production environment, but may be helpful to a developer working
on the project or running automated tests.

Session configuration
---------------------

By default, this project is configured to mark session cookies as secure. To
enable login over HTTP (e.g., when developing with Django's runserver), you
will need to override this in your ``localsettings.py``.  See the example
and comments in ``localsettings.py.dist``.

